#line 1 "modules\\printing_handler\\printing_handler.c"


 
#line 1 ".\\modules\\custom_types\\custom_types.h"



 
typedef struct mtr_prm_st
{
	char right_motor_DC;
	char left_motor_DC;
	char motor_direction;		
} motor_parameters_st;

typedef enum LCD_typeOfWrite
{
  COMMAND,                              
  DATA                                  
} LCD_typeOfWrite_en;

















typedef enum Motor_Mode
{
  IN_IN,
  PHASE_ENABLE
} Motor_Mode_en;

typedef enum Motor_Direction
{
  FWD,
  RWD
} Motor_Direction_en;


typedef enum Led_State
{
  Right_Feedback_Off,
	Right_Feedback_On,
	Left_Feedback_Off,
	Left_Feedback_On,
	Center_Feedback_Off,
	Center_Feedback_On
} Led_State_en;



#line 5 "modules\\printing_handler\\printing_handler.c"
 
#line 1 ".\\OS\\os_core.h"








#line 1 "C:\\Keil_v5\\ARM\\ARMCC\\Bin\\..\\include\\stdint.h"
 
 





 









     
#line 27 "C:\\Keil_v5\\ARM\\ARMCC\\Bin\\..\\include\\stdint.h"
     











#line 46 "C:\\Keil_v5\\ARM\\ARMCC\\Bin\\..\\include\\stdint.h"





 

     

     
typedef   signed          char int8_t;
typedef   signed short     int int16_t;
typedef   signed           int int32_t;
typedef   signed       __int64 int64_t;

     
typedef unsigned          char uint8_t;
typedef unsigned short     int uint16_t;
typedef unsigned           int uint32_t;
typedef unsigned       __int64 uint64_t;

     

     
     
typedef   signed          char int_least8_t;
typedef   signed short     int int_least16_t;
typedef   signed           int int_least32_t;
typedef   signed       __int64 int_least64_t;

     
typedef unsigned          char uint_least8_t;
typedef unsigned short     int uint_least16_t;
typedef unsigned           int uint_least32_t;
typedef unsigned       __int64 uint_least64_t;

     

     
typedef   signed           int int_fast8_t;
typedef   signed           int int_fast16_t;
typedef   signed           int int_fast32_t;
typedef   signed       __int64 int_fast64_t;

     
typedef unsigned           int uint_fast8_t;
typedef unsigned           int uint_fast16_t;
typedef unsigned           int uint_fast32_t;
typedef unsigned       __int64 uint_fast64_t;

     




typedef   signed           int intptr_t;
typedef unsigned           int uintptr_t;


     
typedef   signed     long long intmax_t;
typedef unsigned     long long uintmax_t;




     

     





     





     





     

     





     





     





     

     





     





     





     

     






     






     






     

     


     


     


     

     
#line 216 "C:\\Keil_v5\\ARM\\ARMCC\\Bin\\..\\include\\stdint.h"

     



     






     
    
 



#line 241 "C:\\Keil_v5\\ARM\\ARMCC\\Bin\\..\\include\\stdint.h"

     







     










     











#line 305 "C:\\Keil_v5\\ARM\\ARMCC\\Bin\\..\\include\\stdint.h"






 
#line 10 ".\\OS\\os_core.h"
























struct tcb{  
  int32_t *sp;  
  struct tcb *next;  
	int32_t *blocked;  
	int32_t sleep;  
  uint8_t priority;  
};
typedef struct tcb tcbType;

struct ptcb{	
	int32_t semaphore;
	uint32_t period;
	uint32_t counter;
};
typedef struct ptcb ptcbType;







 





struct fifo_st{
	uint32_t Fifo[10];
	uint32_t LostData;	
	int32_t CurrentSize;
	int32_t Mutex;
	uint8_t PutI;
	uint8_t GetI;
};
typedef struct fifo_st fifo_t;







void OS_Init(void);







int OS_AddThreads(void(*thread0)(void), uint32_t p0,
                  void(*thread1)(void), uint32_t p1,
                  void(*thread2)(void), uint32_t p2,
                  void(*thread3)(void), uint32_t p3,
                  void(*thread4)(void), uint32_t p4,
                  void(*thread5)(void), uint32_t p5,
                  void(*thread6)(void), uint32_t p6,
                  void(*thread7)(void), uint32_t p7);












int OS_AddPeriodicEventThread(int32_t *semaPt, uint32_t period);







void OS_Launch(uint32_t theTimeSlice);






void OS_Suspend(void);






void OS_Sleep(uint32_t sleepTime);






void OS_InitSemaphore(int32_t *semaPt, int32_t value);







void OS_Wait(int32_t *semaPt);







void OS_Signal(int32_t *semaPt);






void OS_FIFO_Init(fifo_t *fifo);







int OS_FIFO_Put(fifo_t *fifo,uint32_t data);







uint32_t OS_FIFO_Get(fifo_t *fifo);



#line 7 "modules\\printing_handler\\printing_handler.c"
 

 

 
#line 1 "modules\\printing_handler\\printing_handler.h"




 

#line 8 "modules\\printing_handler\\printing_handler.h"
 
void Print_Welcome_Image(void);
void Print_Motor_Parameters(void);


#line 13 "modules\\printing_handler\\printing_handler.c"

 
#line 1 ".\\modules\\lcd_handler\\lcd_handler.h"




 
#line 1 "C:\\Keil_v5\\ARM\\ARMCC\\Bin\\..\\include\\stdbool.h"
 






 





#line 25 "C:\\Keil_v5\\ARM\\ARMCC\\Bin\\..\\include\\stdbool.h"



#line 7 ".\\modules\\lcd_handler\\lcd_handler.h"

 








































































































 

 
void LCD_init(void);
_Bool LCD_set_cursor(unsigned char xpos,unsigned char ypos);
void LCD_clear(void);
void LCD_out_char(unsigned char data);
void LCD_out_string(char *string);
void LCD_out_number(unsigned short number);
void LCD_out_image(const unsigned char *image);



#line 16 "modules\\printing_handler\\printing_handler.c"
#line 1 ".\\modules\\resources\\resources.h"







static const unsigned char res_Longhorn1[] = {
  0x08, 0x08, 0x08, 0x08, 0x08, 0x18, 0x18, 0x18, 0x38, 0x30, 0x30, 0x30, 0x70, 0xF0,
  0xE0, 0xC0, 0xC0, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xC0, 0xC0, 0xE0, 0xE0, 0xF0, 0x70,
  0x70, 0x30, 0x30, 0x18, 0x18, 0x18, 0x18, 0x08, 0x08, 0x08, 0x08, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x01, 0x03, 0x03, 0x03, 0x07, 0x0F, 0x0E, 0x0C, 0x1C, 0x38, 0x38, 0xB8, 0xF8, 0xF0,
  0xF0, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xFC, 0xFC, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8,
  0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xF0, 0xE0, 0xE0, 0xF0, 0xF0, 0xF0,
  0xF0, 0x78, 0x38, 0x3C, 0x1C, 0x1F, 0x0F, 0x07, 0x03, 0x03, 0x01, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x0F, 0x0F, 0x0F, 0x0F,
  0x0F, 0x07, 0x07, 0x07, 0x1F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x1F, 0x0F, 0x1F, 0x1F, 0x1F, 0x1F,
  0x1F, 0x1F, 0x1E, 0x0E, 0x04, 0x00, 0x00, 0x00, 0x0F, 0x05, 0x0B, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x07, 0x1F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0x1F, 0x07, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3C, 0x7F, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0x7F, 0x3F, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};


static const unsigned char res_Longhorn2[] = {
  0x08, 0x08, 0x08, 0x08, 0x08, 0x18, 0x18, 0x18, 0x38, 0x30, 0x30, 0x30, 0x70, 0xF0,
  0xE0, 0xC0, 0xC0, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xC0, 0xC0, 0xE0, 0xE0, 0xF0, 0x70,
  0x70, 0x30, 0x30, 0x18, 0x18, 0x18, 0x18, 0x08, 0x08, 0x08, 0x08, 0x00, 0x00, 0x00,
  0xF0, 0x08, 0x04, 0x24, 0x24, 0xE4, 0x24, 0x24, 0x04, 0x04, 0x04, 0x04, 0x04, 0x08,
  0xF1, 0x03, 0x03, 0x03, 0x07, 0x0F, 0x0E, 0x0C, 0x1C, 0x38, 0x38, 0xB8, 0xF8, 0xF0,
  0xF0, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xFC, 0xFC, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8,
  0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xF0, 0xE0, 0xE0, 0xF0, 0xF0, 0xF0,
  0xF0, 0x78, 0x38, 0x3C, 0x1C, 0x1F, 0x0F, 0x07, 0x03, 0x03, 0x01, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0xFF, 0x00, 0x00, 0x04, 0x04, 0x07, 0x84, 0x44, 0x40, 0x80, 0x40, 0x40, 0x80, 0x00,
  0x00, 0x01, 0x02, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x0F, 0x0F, 0x0F, 0x0F,
  0x0F, 0x07, 0x07, 0x07, 0x1F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x1F, 0x0F, 0x1F, 0x1F, 0x1F, 0x1F,
  0x1F, 0x1F, 0x1E, 0x0E, 0x04, 0x00, 0x00, 0x00, 0x0F, 0x05, 0x0B, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x02, 0x84, 0x88, 0x84, 0x02, 0x01, 0x00,
  0x00, 0x80, 0x00, 0x00, 0x01, 0x82, 0x84, 0x84, 0x84, 0x04, 0x04, 0x84, 0x04, 0x04,
  0x84, 0x08, 0x10, 0xE0, 0x00, 0x01, 0x07, 0x1F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0x1F, 0x07, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x0F, 0x10, 0x20, 0x40, 0x80, 0x80, 0x80, 0x80, 0x88, 0x88, 0x8A, 0x85, 0x80, 0x80,
  0x89, 0x8F, 0x88, 0x80, 0x80, 0x83, 0x82, 0x82, 0x8F, 0x80, 0x80, 0x8F, 0x82, 0x85,
  0x88, 0x80, 0x80, 0x8F, 0x50, 0x20, 0x00, 0x3C, 0x7F, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0x7F, 0x3F, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};


static const unsigned char res_welcome_img[] = {
  0x00, 0x00, 0x00, 0x00, 0xFC, 0x04, 0x04, 0x04, 0xF8, 0x00, 0x00, 0xFC, 0x44, 0xA4,
  0x24, 0x18, 0x00, 0x00, 0xF8, 0x04, 0x04, 0x04, 0xF8, 0x00, 0x00, 0xFC, 0x00, 0x00,
  0xFC, 0x04, 0x04, 0x04, 0xF8, 0x00, 0x00, 0xFC, 0x24, 0x24, 0x24, 0xD8, 0x00, 0x00,
  0xF8, 0x04, 0x04, 0x04, 0xF8, 0x00, 0x00, 0x04, 0x04, 0xFC, 0x04, 0x04, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x60, 0x80, 0x00, 0x80, 0x60, 0x00, 0x00, 0x40, 0xE0, 0x00,
  0x00, 0x00, 0x00, 0x00, 0xC0, 0x40, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x03, 0x02, 0x02, 0x02, 0x01, 0x00, 0x00, 0x03, 0x00, 0x00,
  0x01, 0x02, 0x00, 0x00, 0x01, 0x02, 0x02, 0x02, 0x01, 0x00, 0x00, 0x03, 0x00, 0x00,
  0x03, 0x02, 0x02, 0x02, 0x01, 0x00, 0x80, 0x43, 0x42, 0x22, 0x22, 0xB1, 0x90, 0x90,
  0x91, 0x92, 0x32, 0x22, 0x21, 0x40, 0x40, 0x80, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x02, 0x01, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x03, 0x01, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0xC0, 0x38, 0x06, 0x61, 0x10, 0x52, 0x52, 0x03, 0x01, 0x01, 0x00, 0x00,
  0x00, 0x01, 0x01, 0x03, 0x02, 0x52, 0x50, 0x10, 0x61, 0x06, 0x38, 0xE0, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0xFF, 0x02, 0x42, 0x22, 0xF2, 0x22, 0x32, 0x22, 0xB2, 0xA2, 0x32, 0x23,
  0x32, 0x22, 0x32, 0x22, 0x32, 0x22, 0x32, 0xE2, 0x22, 0x92, 0x02, 0xFF, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80,
  0x80, 0x00, 0xFF, 0x00, 0x92, 0x49, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x21, 0x12,
  0x0C, 0x30, 0xC0, 0x80, 0x80, 0x00, 0x00, 0xFF, 0x49, 0x24, 0x00, 0xFF, 0x00, 0x80,
  0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x40, 0x40, 0x40,
  0x5E, 0x0C, 0x1F, 0x10, 0x14, 0x12, 0x13, 0x16, 0x12, 0x16, 0x12, 0x16, 0x12, 0x16,
  0x12, 0x16, 0x12, 0x16, 0x12, 0x16, 0x12, 0x17, 0x12, 0x11, 0x10, 0x1F, 0x0C, 0x5E,
  0x40, 0x40, 0x40, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};



static const char ASCII[][5] = {
  {0x00, 0x00, 0x00, 0x00, 0x00} 
  ,{0x00, 0x00, 0x5f, 0x00, 0x00} 
  ,{0x00, 0x07, 0x00, 0x07, 0x00} 
  ,{0x14, 0x7f, 0x14, 0x7f, 0x14} 
  ,{0x24, 0x2a, 0x7f, 0x2a, 0x12} 
  ,{0x23, 0x13, 0x08, 0x64, 0x62} 
  ,{0x36, 0x49, 0x55, 0x22, 0x50} 
  ,{0x00, 0x05, 0x03, 0x00, 0x00} 
  ,{0x00, 0x1c, 0x22, 0x41, 0x00} 
  ,{0x00, 0x41, 0x22, 0x1c, 0x00} 
  ,{0x14, 0x08, 0x3e, 0x08, 0x14} 
  ,{0x08, 0x08, 0x3e, 0x08, 0x08} 
  ,{0x00, 0x50, 0x30, 0x00, 0x00} 
  ,{0x08, 0x08, 0x08, 0x08, 0x08} 
  ,{0x00, 0x60, 0x60, 0x00, 0x00} 
  ,{0x20, 0x10, 0x08, 0x04, 0x02} 
  ,{0x3e, 0x51, 0x49, 0x45, 0x3e} 
  ,{0x00, 0x42, 0x7f, 0x40, 0x00} 
  ,{0x42, 0x61, 0x51, 0x49, 0x46} 
  ,{0x21, 0x41, 0x45, 0x4b, 0x31} 
  ,{0x18, 0x14, 0x12, 0x7f, 0x10} 
  ,{0x27, 0x45, 0x45, 0x45, 0x39} 
  ,{0x3c, 0x4a, 0x49, 0x49, 0x30} 
  ,{0x01, 0x71, 0x09, 0x05, 0x03} 
  ,{0x36, 0x49, 0x49, 0x49, 0x36} 
  ,{0x06, 0x49, 0x49, 0x29, 0x1e} 
  ,{0x00, 0x36, 0x36, 0x00, 0x00} 
  ,{0x00, 0x56, 0x36, 0x00, 0x00} 
  ,{0x08, 0x14, 0x22, 0x41, 0x00} 
  ,{0x14, 0x14, 0x14, 0x14, 0x14} 
  ,{0x00, 0x41, 0x22, 0x14, 0x08} 
  ,{0x02, 0x01, 0x51, 0x09, 0x06} 
  ,{0x32, 0x49, 0x79, 0x41, 0x3e} 
  ,{0x7e, 0x11, 0x11, 0x11, 0x7e} 
  ,{0x7f, 0x49, 0x49, 0x49, 0x36} 
  ,{0x3e, 0x41, 0x41, 0x41, 0x22} 
  ,{0x7f, 0x41, 0x41, 0x22, 0x1c} 
  ,{0x7f, 0x49, 0x49, 0x49, 0x41} 
  ,{0x7f, 0x09, 0x09, 0x09, 0x01} 
  ,{0x3e, 0x41, 0x49, 0x49, 0x7a} 
  ,{0x7f, 0x08, 0x08, 0x08, 0x7f} 
  ,{0x00, 0x41, 0x7f, 0x41, 0x00} 
  ,{0x20, 0x40, 0x41, 0x3f, 0x01} 
  ,{0x7f, 0x08, 0x14, 0x22, 0x41} 
  ,{0x7f, 0x40, 0x40, 0x40, 0x40} 
  ,{0x7f, 0x02, 0x0c, 0x02, 0x7f} 
  ,{0x7f, 0x04, 0x08, 0x10, 0x7f} 
  ,{0x3e, 0x41, 0x41, 0x41, 0x3e} 
  ,{0x7f, 0x09, 0x09, 0x09, 0x06} 
  ,{0x3e, 0x41, 0x51, 0x21, 0x5e} 
  ,{0x7f, 0x09, 0x19, 0x29, 0x46} 
  ,{0x46, 0x49, 0x49, 0x49, 0x31} 
  ,{0x01, 0x01, 0x7f, 0x01, 0x01} 
  ,{0x3f, 0x40, 0x40, 0x40, 0x3f} 
  ,{0x1f, 0x20, 0x40, 0x20, 0x1f} 
  ,{0x3f, 0x40, 0x38, 0x40, 0x3f} 
  ,{0x63, 0x14, 0x08, 0x14, 0x63} 
  ,{0x07, 0x08, 0x70, 0x08, 0x07} 
  ,{0x61, 0x51, 0x49, 0x45, 0x43} 
  ,{0x00, 0x7f, 0x41, 0x41, 0x00} 
  ,{0x02, 0x04, 0x08, 0x10, 0x20} 
  ,{0x00, 0x41, 0x41, 0x7f, 0x00} 
  ,{0x04, 0x02, 0x01, 0x02, 0x04} 
  ,{0x40, 0x40, 0x40, 0x40, 0x40} 
  ,{0x00, 0x01, 0x02, 0x04, 0x00} 
  ,{0x20, 0x54, 0x54, 0x54, 0x78} 
  ,{0x7f, 0x48, 0x44, 0x44, 0x38} 
  ,{0x38, 0x44, 0x44, 0x44, 0x20} 
  ,{0x38, 0x44, 0x44, 0x48, 0x7f} 
  ,{0x38, 0x54, 0x54, 0x54, 0x18} 
  ,{0x08, 0x7e, 0x09, 0x01, 0x02} 
  ,{0x0c, 0x52, 0x52, 0x52, 0x3e} 
  ,{0x7f, 0x08, 0x04, 0x04, 0x78} 
  ,{0x00, 0x44, 0x7d, 0x40, 0x00} 
  ,{0x20, 0x40, 0x44, 0x3d, 0x00} 
  ,{0x7f, 0x10, 0x28, 0x44, 0x00} 
  ,{0x00, 0x41, 0x7f, 0x40, 0x00} 
  ,{0x7c, 0x04, 0x18, 0x04, 0x78} 
  ,{0x7c, 0x08, 0x04, 0x04, 0x78} 
  ,{0x38, 0x44, 0x44, 0x44, 0x38} 
  ,{0x7c, 0x14, 0x14, 0x14, 0x08} 
  ,{0x08, 0x14, 0x14, 0x18, 0x7c} 
  ,{0x7c, 0x08, 0x04, 0x04, 0x08} 
  ,{0x48, 0x54, 0x54, 0x54, 0x20} 
  ,{0x04, 0x3f, 0x44, 0x40, 0x20} 
  ,{0x3c, 0x40, 0x40, 0x20, 0x7c} 
  ,{0x1c, 0x20, 0x40, 0x20, 0x1c} 
  ,{0x3c, 0x40, 0x30, 0x40, 0x3c} 
  ,{0x44, 0x28, 0x10, 0x28, 0x44} 
  ,{0x0c, 0x50, 0x50, 0x50, 0x3c} 
  ,{0x44, 0x64, 0x54, 0x4c, 0x44} 
  ,{0x00, 0x08, 0x36, 0x41, 0x00} 
  ,{0x00, 0x00, 0x7f, 0x00, 0x00} 
  ,{0x00, 0x41, 0x36, 0x08, 0x00} 
  ,{0x10, 0x08, 0x08, 0x10, 0x08} 

  ,{0x1f, 0x24, 0x7c, 0x24, 0x1f} 
};




#line 17 "modules\\printing_handler\\printing_handler.c"

 
extern motor_parameters_st motor_parameters;	
extern fifo_t FifoADC_Temp;
extern fifo_t FifoADC_MxLight;
extern fifo_t FifoADC_LxLight;
extern fifo_t FifoADC_RxLight;

char print_flag = 0;
 
void Print_Welcome_Image(void)
{
	LCD_out_image(res_welcome_img);
	
}
void Print_Motor_Parameters(void)
{
	uint32_t light;
	uint32_t temperature;
	if(print_flag ==0)
	{
		LCD_clear();
		print_flag = 1;
	}
	 
	LCD_set_cursor(2,0);
	LCD_out_number(motor_parameters.left_motor_DC);	
	LCD_out_char(37); 																	
	LCD_set_cursor(0,0);
	LCD_out_string("MtrL");															
	
	 
	LCD_set_cursor(2,1);
	LCD_out_number(motor_parameters.right_motor_DC);	
	LCD_out_char(37); 																	
	LCD_set_cursor(0,1);
	LCD_out_string("MtrR");															
	
	 
	LCD_set_cursor(0,2);
	LCD_out_string("Dir ");															
	
	switch(motor_parameters.motor_direction)
	{
		case 0:																						
			LCD_out_string("St");
			break;
		case 1:																						
			LCD_out_string("FL");
			break;
		case 2:																						
			LCD_out_string("FR");
			break;
		case 3:																						
			LCD_out_string("Fw");
			break;
		case 4:																						
			LCD_out_string("Bw");
			break;
		default:
			LCD_out_string("St");
			break;
	}
	LCD_set_cursor(4,3);
	temperature = OS_FIFO_Get(&FifoADC_Temp);
	LCD_out_number(temperature);
	LCD_set_cursor(0,3);
	LCD_out_string("Temp:");
	LCD_set_cursor(8,4);
	light = OS_FIFO_Get(&FifoADC_RxLight);
	LCD_out_number(light);
	LCD_set_cursor(4,4);
	light = OS_FIFO_Get(&FifoADC_MxLight);
	LCD_out_number(light);
	LCD_set_cursor(0,4);
	light = OS_FIFO_Get(&FifoADC_LxLight);
	LCD_out_number(light);
}


