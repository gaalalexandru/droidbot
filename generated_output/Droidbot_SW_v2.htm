<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\generated_output\Droidbot_SW_v2.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\generated_output\Droidbot_SW_v2.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060300: Last Updated: Tue Feb 21 21:56:35 2017
<BR><P>
<H3>Maximum Stack Usage =        124 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_entry_main &rArr; main &rArr; OS_EdgeTrigger_Init &rArr; GPIOPinTypeGPIOInput &rArr; GPIOPadConfigSet
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[80]">Reset_Handler</a>
 <LI><a href="#[82]">DisableInterrupts</a>
 <LI><a href="#[83]">EnableInterrupts</a>
 <LI><a href="#[84]">StartCritical</a>
 <LI><a href="#[85]">EndCritical</a>
 <LI><a href="#[86]">WaitForInterrupt</a>
 <LI><a href="#[87]">__user_initial_stackheap</a>
 <LI><a href="#[b]">SysTick_Handler</a>
 <LI><a href="#[155]">StartOS</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[3]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">NMI_Handler</a><BR>
 <LI><a href="#[4]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">HardFault_Handler</a><BR>
 <LI><a href="#[5]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">MemManage_Handler</a><BR>
 <LI><a href="#[6]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">BusFault_Handler</a><BR>
 <LI><a href="#[7]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">UsageFault_Handler</a><BR>
 <LI><a href="#[8]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">SVC_Handler</a><BR>
 <LI><a href="#[9]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">DebugMon_Handler</a><BR>
 <LI><a href="#[a]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a]">PendSV_Handler</a><BR>
 <LI><a href="#[1a]">ADC0Seq0_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1a]">ADC0Seq0_Handler</a><BR>
 <LI><a href="#[10a]">SSIDataPut</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[10a]">SSIDataPut</a><BR>
 <LI><a href="#[9a]">SysCtlDelay</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9a]">SysCtlDelay</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1a]">ADC0Seq0_Handler</a> from startup_new.o(.text) referenced from startup_new.o(RESET)
 <LI><a href="#[1b]">ADC0Seq1_Handler</a> from startup_new.o(.text) referenced from startup_new.o(RESET)
 <LI><a href="#[1c]">ADC0Seq2_Handler</a> from startup_new.o(.text) referenced from startup_new.o(RESET)
 <LI><a href="#[1d]">ADC0Seq3_Handler</a> from adc_handler.o(.text) referenced from startup_new.o(RESET)
 <LI><a href="#[3c]">ADC1Seq0_Handler</a> from adc_handler.o(.text) referenced from startup_new.o(RESET)
 <LI><a href="#[3d]">ADC1Seq1_Handler</a> from adc_handler.o(.text) referenced from startup_new.o(RESET)
 <LI><a href="#[3e]">ADC1Seq2_Handler</a> from adc_handler.o(.text) referenced from startup_new.o(RESET)
 <LI><a href="#[3f]">ADC1Seq3_Handler</a> from startup_new.o(.text) referenced from startup_new.o(RESET)
 <LI><a href="#[6]">BusFault_Handler</a> from startup_new.o(.text) referenced from startup_new.o(RESET)
 <LI><a href="#[33]">CAN0_Handler</a> from startup_new.o(.text) referenced from startup_new.o(RESET)
 <LI><a href="#[34]">CAN1_Handler</a> from startup_new.o(.text) referenced from startup_new.o(RESET)
 <LI><a href="#[35]">CAN2_Handler</a> from startup_new.o(.text) referenced from startup_new.o(RESET)
 <LI><a href="#[25]">Comp0_Handler</a> from interrupt_handler.o(.text) referenced from startup_new.o(RESET)
 <LI><a href="#[26]">Comp1_Handler</a> from startup_new.o(.text) referenced from startup_new.o(RESET)
 <LI><a href="#[27]">Comp2_Handler</a> from startup_new.o(.text) referenced from startup_new.o(RESET)
 <LI><a href="#[9]">DebugMon_Handler</a> from startup_new.o(.text) referenced from startup_new.o(RESET)
 <LI><a href="#[36]">Ethernet_Handler</a> from startup_new.o(.text) referenced from startup_new.o(RESET)
 <LI><a href="#[41]">ExtBus_Handler</a> from startup_new.o(.text) referenced from startup_new.o(RESET)
 <LI><a href="#[5e]">FPU_Handler</a> from startup_new.o(.text) referenced from startup_new.o(RESET)
 <LI><a href="#[66]">Fan0_Handler</a> from startup_new.o(.text) referenced from startup_new.o(RESET)
 <LI><a href="#[29]">FlashCtl_Handler</a> from startup_new.o(.text) referenced from startup_new.o(RESET)
 <LI><a href="#[c]">GPIOPortA_Handler</a> from startup_new.o(.text) referenced from startup_new.o(RESET)
 <LI><a href="#[d]">GPIOPortB_Handler</a> from startup_new.o(.text) referenced from startup_new.o(RESET)
 <LI><a href="#[e]">GPIOPortC_Handler</a> from startup_new.o(.text) referenced from startup_new.o(RESET)
 <LI><a href="#[f]">GPIOPortD_Handler</a> from os_hw.o(.text) referenced from startup_new.o(RESET)
 <LI><a href="#[10]">GPIOPortE_Handler</a> from startup_new.o(.text) referenced from startup_new.o(RESET)
 <LI><a href="#[2a]">GPIOPortF_Handler</a> from os_hw.o(.text) referenced from startup_new.o(RESET)
 <LI><a href="#[2b]">GPIOPortG_Handler</a> from startup_new.o(.text) referenced from startup_new.o(RESET)
 <LI><a href="#[2c]">GPIOPortH_Handler</a> from startup_new.o(.text) referenced from startup_new.o(RESET)
 <LI><a href="#[42]">GPIOPortJ_Handler</a> from startup_new.o(.text) referenced from startup_new.o(RESET)
 <LI><a href="#[43]">GPIOPortK_Handler</a> from startup_new.o(.text) referenced from startup_new.o(RESET)
 <LI><a href="#[44]">GPIOPortL_Handler</a> from startup_new.o(.text) referenced from startup_new.o(RESET)
 <LI><a href="#[63]">GPIOPortM_Handler</a> from startup_new.o(.text) referenced from startup_new.o(RESET)
 <LI><a href="#[64]">GPIOPortN_Handler</a> from startup_new.o(.text) referenced from startup_new.o(RESET)
 <LI><a href="#[68]">GPIOPortP1_Handler</a> from startup_new.o(.text) referenced from startup_new.o(RESET)
 <LI><a href="#[69]">GPIOPortP2_Handler</a> from startup_new.o(.text) referenced from startup_new.o(RESET)
 <LI><a href="#[6a]">GPIOPortP3_Handler</a> from startup_new.o(.text) referenced from startup_new.o(RESET)
 <LI><a href="#[6b]">GPIOPortP4_Handler</a> from startup_new.o(.text) referenced from startup_new.o(RESET)
 <LI><a href="#[6c]">GPIOPortP5_Handler</a> from startup_new.o(.text) referenced from startup_new.o(RESET)
 <LI><a href="#[6d]">GPIOPortP6_Handler</a> from startup_new.o(.text) referenced from startup_new.o(RESET)
 <LI><a href="#[6e]">GPIOPortP7_Handler</a> from startup_new.o(.text) referenced from startup_new.o(RESET)
 <LI><a href="#[67]">GPIOPortP_Handler</a> from startup_new.o(.text) referenced from startup_new.o(RESET)
 <LI><a href="#[70]">GPIOPortQ1_Handler</a> from startup_new.o(.text) referenced from startup_new.o(RESET)
 <LI><a href="#[71]">GPIOPortQ2_Handler</a> from startup_new.o(.text) referenced from startup_new.o(RESET)
 <LI><a href="#[72]">GPIOPortQ3_Handler</a> from startup_new.o(.text) referenced from startup_new.o(RESET)
 <LI><a href="#[73]">GPIOPortQ4_Handler</a> from startup_new.o(.text) referenced from startup_new.o(RESET)
 <LI><a href="#[74]">GPIOPortQ5_Handler</a> from startup_new.o(.text) referenced from startup_new.o(RESET)
 <LI><a href="#[75]">GPIOPortQ6_Handler</a> from startup_new.o(.text) referenced from startup_new.o(RESET)
 <LI><a href="#[76]">GPIOPortQ7_Handler</a> from startup_new.o(.text) referenced from startup_new.o(RESET)
 <LI><a href="#[6f]">GPIOPortQ_Handler</a> from startup_new.o(.text) referenced from startup_new.o(RESET)
 <LI><a href="#[77]">GPIOPortR_Handler</a> from startup_new.o(.text) referenced from startup_new.o(RESET)
 <LI><a href="#[78]">GPIOPortS_Handler</a> from startup_new.o(.text) referenced from startup_new.o(RESET)
 <LI><a href="#[4]">HardFault_Handler</a> from startup_new.o(.text) referenced from startup_new.o(RESET)
 <LI><a href="#[37]">Hibernate_Handler</a> from startup_new.o(.text) referenced from startup_new.o(RESET)
 <LI><a href="#[14]">I2C0_Handler</a> from startup_new.o(.text) referenced from startup_new.o(RESET)
 <LI><a href="#[31]">I2C1_Handler</a> from startup_new.o(.text) referenced from startup_new.o(RESET)
 <LI><a href="#[4c]">I2C2_Handler</a> from startup_new.o(.text) referenced from startup_new.o(RESET)
 <LI><a href="#[4d]">I2C3_Handler</a> from startup_new.o(.text) referenced from startup_new.o(RESET)
 <LI><a href="#[61]">I2C4_Handler</a> from startup_new.o(.text) referenced from startup_new.o(RESET)
 <LI><a href="#[62]">I2C5_Handler</a> from startup_new.o(.text) referenced from startup_new.o(RESET)
 <LI><a href="#[40]">I2S0_Handler</a> from startup_new.o(.text) referenced from startup_new.o(RESET)
 <LI><a href="#[a7]">Idle_Task</a> from main.o(.text) referenced from main.o(.text)
 <LI><a href="#[60]">LPC0_Handler</a> from startup_new.o(.text) referenced from startup_new.o(RESET)
 <LI><a href="#[5]">MemManage_Handler</a> from startup_new.o(.text) referenced from startup_new.o(RESET)
 <LI><a href="#[3]">NMI_Handler</a> from startup_new.o(.text) referenced from startup_new.o(RESET)
 <LI><a href="#[5f]">PECI0_Handler</a> from startup_new.o(.text) referenced from startup_new.o(RESET)
 <LI><a href="#[15]">PWM0Fault_Handler</a> from startup_new.o(.text) referenced from startup_new.o(RESET)
 <LI><a href="#[16]">PWM0Generator0_Handler</a> from startup_new.o(.text) referenced from startup_new.o(RESET)
 <LI><a href="#[17]">PWM0Generator1_Handler</a> from startup_new.o(.text) referenced from startup_new.o(RESET)
 <LI><a href="#[18]">PWM0Generator2_Handler</a> from startup_new.o(.text) referenced from startup_new.o(RESET)
 <LI><a href="#[39]">PWM0Generator3_Handler</a> from startup_new.o(.text) referenced from startup_new.o(RESET)
 <LI><a href="#[7d]">PWM1Fault_Handler</a> from startup_new.o(.text) referenced from startup_new.o(RESET)
 <LI><a href="#[79]">PWM1Generator0_Handler</a> from startup_new.o(.text) referenced from startup_new.o(RESET)
 <LI><a href="#[7a]">PWM1Generator1_Handler</a> from startup_new.o(.text) referenced from startup_new.o(RESET)
 <LI><a href="#[7b]">PWM1Generator2_Handler</a> from startup_new.o(.text) referenced from startup_new.o(RESET)
 <LI><a href="#[7c]">PWM1Generator3_Handler</a> from startup_new.o(.text) referenced from startup_new.o(RESET)
 <LI><a href="#[a]">PendSV_Handler</a> from startup_new.o(.text) referenced from startup_new.o(RESET)
 <LI><a href="#[19]">Quadrature0_Handler</a> from startup_new.o(.text) referenced from startup_new.o(RESET)
 <LI><a href="#[32]">Quadrature1_Handler</a> from startup_new.o(.text) referenced from startup_new.o(RESET)
 <LI><a href="#[65]">Quadrature2_Handler</a> from startup_new.o(.text) referenced from startup_new.o(RESET)
 <LI><a href="#[80]">Reset_Handler</a> from startup_new.o(.text) referenced from startup_new.o(RESET)
 <LI><a href="#[13]">SSI0_Handler</a> from startup_new.o(.text) referenced from startup_new.o(RESET)
 <LI><a href="#[2e]">SSI1_Handler</a> from startup_new.o(.text) referenced from startup_new.o(RESET)
 <LI><a href="#[45]">SSI2_Handler</a> from startup_new.o(.text) referenced from startup_new.o(RESET)
 <LI><a href="#[46]">SSI3_Handler</a> from startup_new.o(.text) referenced from startup_new.o(RESET)
 <LI><a href="#[8]">SVC_Handler</a> from startup_new.o(.text) referenced from startup_new.o(RESET)
 <LI><a href="#[28]">SysCtl_Handler</a> from startup_new.o(.text) referenced from startup_new.o(RESET)
 <LI><a href="#[b]">SysTick_Handler</a> from osasm.o(.text) referenced from startup_new.o(RESET)
 <LI><a href="#[9b]">Task0</a> from main.o(.text) referenced from main.o(.text)
 <LI><a href="#[9e]">Task1</a> from main.o(.text) referenced from main.o(.text)
 <LI><a href="#[a0]">Task2</a> from main.o(.text) referenced from main.o(.text)
 <LI><a href="#[a2]">Task3</a> from main.o(.text) referenced from main.o(.text)
 <LI><a href="#[a6]">Task4</a> from main.o(.text) referenced from main.o(.text)
 <LI><a href="#[b3]">Task5</a> from main.o(.text) referenced from main.o(.text)
 <LI><a href="#[b2]">Task6</a> from main.o(.text) referenced from main.o(.text)
 <LI><a href="#[1f]">Timer0A_Handler</a> from os_hw.o(.text) referenced from startup_new.o(RESET)
 <LI><a href="#[20]">Timer0B_Handler</a> from startup_new.o(.text) referenced from startup_new.o(RESET)
 <LI><a href="#[21]">Timer1A_Handler</a> from os_hw.o(.text) referenced from startup_new.o(RESET)
 <LI><a href="#[22]">Timer1B_Handler</a> from startup_new.o(.text) referenced from startup_new.o(RESET)
 <LI><a href="#[23]">Timer2A_Handler</a> from startup_new.o(.text) referenced from startup_new.o(RESET)
 <LI><a href="#[24]">Timer2B_Handler</a> from startup_new.o(.text) referenced from startup_new.o(RESET)
 <LI><a href="#[2f]">Timer3A_Handler</a> from startup_new.o(.text) referenced from startup_new.o(RESET)
 <LI><a href="#[30]">Timer3B_Handler</a> from startup_new.o(.text) referenced from startup_new.o(RESET)
 <LI><a href="#[4e]">Timer4A_Handler</a> from startup_new.o(.text) referenced from startup_new.o(RESET)
 <LI><a href="#[4f]">Timer4B_Handler</a> from startup_new.o(.text) referenced from startup_new.o(RESET)
 <LI><a href="#[50]">Timer5A_Handler</a> from startup_new.o(.text) referenced from startup_new.o(RESET)
 <LI><a href="#[51]">Timer5B_Handler</a> from startup_new.o(.text) referenced from startup_new.o(RESET)
 <LI><a href="#[11]">UART0_Handler</a> from startup_new.o(.text) referenced from startup_new.o(RESET)
 <LI><a href="#[12]">UART1_Handler</a> from startup_new.o(.text) referenced from startup_new.o(RESET)
 <LI><a href="#[2d]">UART2_Handler</a> from startup_new.o(.text) referenced from startup_new.o(RESET)
 <LI><a href="#[47]">UART3_Handler</a> from startup_new.o(.text) referenced from startup_new.o(RESET)
 <LI><a href="#[48]">UART4_Handler</a> from startup_new.o(.text) referenced from startup_new.o(RESET)
 <LI><a href="#[49]">UART5_Handler</a> from startup_new.o(.text) referenced from startup_new.o(RESET)
 <LI><a href="#[4a]">UART6_Handler</a> from startup_new.o(.text) referenced from startup_new.o(RESET)
 <LI><a href="#[4b]">UART7_Handler</a> from startup_new.o(.text) referenced from startup_new.o(RESET)
 <LI><a href="#[38]">USB0_Handler</a> from startup_new.o(.text) referenced from startup_new.o(RESET)
 <LI><a href="#[7]">UsageFault_Handler</a> from startup_new.o(.text) referenced from startup_new.o(RESET)
 <LI><a href="#[1e]">WDT_Handler</a> from startup_new.o(.text) referenced from startup_new.o(RESET)
 <LI><a href="#[52]">WideTimer0A_Handler</a> from os_hw.o(.text) referenced from startup_new.o(RESET)
 <LI><a href="#[53]">WideTimer0B_Handler</a> from startup_new.o(.text) referenced from startup_new.o(RESET)
 <LI><a href="#[54]">WideTimer1A_Handler</a> from os_hw.o(.text) referenced from startup_new.o(RESET)
 <LI><a href="#[55]">WideTimer1B_Handler</a> from startup_new.o(.text) referenced from startup_new.o(RESET)
 <LI><a href="#[56]">WideTimer2A_Handler</a> from startup_new.o(.text) referenced from startup_new.o(RESET)
 <LI><a href="#[57]">WideTimer2B_Handler</a> from startup_new.o(.text) referenced from startup_new.o(RESET)
 <LI><a href="#[58]">WideTimer3A_Handler</a> from bsp_tm4c.o(.text) referenced from startup_new.o(RESET)
 <LI><a href="#[59]">WideTimer3B_Handler</a> from startup_new.o(.text) referenced from startup_new.o(RESET)
 <LI><a href="#[5a]">WideTimer4A_Handler</a> from bsp_tm4c.o(.text) referenced from startup_new.o(RESET)
 <LI><a href="#[5b]">WideTimer4B_Handler</a> from startup_new.o(.text) referenced from startup_new.o(RESET)
 <LI><a href="#[5c]">WideTimer5A_Handler</a> from bsp_tm4c.o(.text) referenced from startup_new.o(RESET)
 <LI><a href="#[5d]">WideTimer5B_Handler</a> from startup_new.o(.text) referenced from startup_new.o(RESET)
 <LI><a href="#[7f]">runperiodicevents</a> from os_core.o(.text) referenced from os_core.o(.text)
 <LI><a href="#[7e]">runsleep</a> from os_core.o(.text) referenced from os_core.o(.text)
 <LI><a href="#[3b]">uDMA_Error</a> from startup_new.o(.text) referenced from startup_new.o(RESET)
 <LI><a href="#[3a]">uDMA_Handler</a> from startup_new.o(.text) referenced from startup_new.o(RESET)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[81]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Handler
</UL>

<P><STRONG><a name="[88]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[8a]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[16e]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[16f]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[8b]"></a>__scatterload_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[170]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[91]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[8c]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init
</UL>

<P><STRONG><a name="[171]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[172]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[173]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[174]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[175]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[176]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[177]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[178]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[179]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[17a]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[17b]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[17c]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[17d]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[17e]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[17f]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[180]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[181]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[182]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[183]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[184]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[96]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[185]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[186]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[187]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[188]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[189]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[18a]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[18b]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[89]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[18c]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[8e]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[90]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[18d]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[92]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 124 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; OS_EdgeTrigger_Init &rArr; GPIOPinTypeGPIOInput &rArr; GPIOPadConfigSet
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[18e]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[161]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[95]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[18f]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[97]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[99]"></a>parrotdelay</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bsp_tm4c.o(.emb_text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parrotdelay
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Delay1ms
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parrotdelay
</UL>

<P><STRONG><a name="[9a]"></a>SysCtlDelay</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sysctl.o(.emb_text))
<BR><BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlClockSet
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlDelay
</UL>

<P><STRONG><a name="[162]"></a>CPUcpsid</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, cpu.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntMasterDisable
</UL>

<P><STRONG><a name="[190]"></a>CPUprimask</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cpu.o(.emb_text), UNUSED)

<P><STRONG><a name="[163]"></a>CPUcpsie</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, cpu.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntMasterEnable
</UL>

<P><STRONG><a name="[191]"></a>CPUwfi</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cpu.o(.emb_text), UNUSED)

<P><STRONG><a name="[192]"></a>CPUbasepriSet</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cpu.o(.emb_text), UNUSED)

<P><STRONG><a name="[193]"></a>CPUbasepriGet</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cpu.o(.emb_text), UNUSED)

<P><STRONG><a name="[80]"></a>Reset_Handler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_new.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[3]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_new.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_new.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_new.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_new.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_new.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_new.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_new.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_new.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_new.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_new.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_new.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_new.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_new.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_new.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_new.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_new.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>ADC0Seq0_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_new.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0Seq0_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0Seq0_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_new.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>ADC0Seq1_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_new.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_new.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>ADC0Seq2_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_new.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_new.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>ADC1Seq3_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_new.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_new.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>CAN0_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_new.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_new.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>CAN1_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_new.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_new.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>CAN2_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_new.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_new.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>Comp1_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_new.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_new.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>Comp2_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_new.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_new.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>Ethernet_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_new.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_new.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>ExtBus_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_new.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_new.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>FPU_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_new.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_new.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>Fan0_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_new.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_new.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>FlashCtl_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_new.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_new.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>GPIOPortA_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_new.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_new.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>GPIOPortB_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_new.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_new.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>GPIOPortC_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_new.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_new.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>GPIOPortE_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_new.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_new.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>GPIOPortG_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_new.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_new.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>GPIOPortH_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_new.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_new.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>GPIOPortJ_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_new.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_new.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>GPIOPortK_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_new.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_new.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>GPIOPortL_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_new.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_new.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>GPIOPortM_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_new.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_new.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>GPIOPortN_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_new.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_new.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>GPIOPortP1_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_new.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_new.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>GPIOPortP2_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_new.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_new.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>GPIOPortP3_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_new.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_new.o(RESET)
</UL>
<P><STRONG><a name="[6b]"></a>GPIOPortP4_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_new.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_new.o(RESET)
</UL>
<P><STRONG><a name="[6c]"></a>GPIOPortP5_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_new.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_new.o(RESET)
</UL>
<P><STRONG><a name="[6d]"></a>GPIOPortP6_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_new.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_new.o(RESET)
</UL>
<P><STRONG><a name="[6e]"></a>GPIOPortP7_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_new.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_new.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>GPIOPortP_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_new.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_new.o(RESET)
</UL>
<P><STRONG><a name="[70]"></a>GPIOPortQ1_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_new.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_new.o(RESET)
</UL>
<P><STRONG><a name="[71]"></a>GPIOPortQ2_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_new.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_new.o(RESET)
</UL>
<P><STRONG><a name="[72]"></a>GPIOPortQ3_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_new.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_new.o(RESET)
</UL>
<P><STRONG><a name="[73]"></a>GPIOPortQ4_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_new.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_new.o(RESET)
</UL>
<P><STRONG><a name="[74]"></a>GPIOPortQ5_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_new.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_new.o(RESET)
</UL>
<P><STRONG><a name="[75]"></a>GPIOPortQ6_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_new.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_new.o(RESET)
</UL>
<P><STRONG><a name="[76]"></a>GPIOPortQ7_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_new.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_new.o(RESET)
</UL>
<P><STRONG><a name="[6f]"></a>GPIOPortQ_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_new.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_new.o(RESET)
</UL>
<P><STRONG><a name="[77]"></a>GPIOPortR_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_new.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_new.o(RESET)
</UL>
<P><STRONG><a name="[78]"></a>GPIOPortS_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_new.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_new.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>Hibernate_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_new.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_new.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>I2C0_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_new.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_new.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>I2C1_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_new.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_new.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>I2C2_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_new.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_new.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>I2C3_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_new.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_new.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>I2C4_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_new.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_new.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>I2C5_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_new.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_new.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>I2S0_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_new.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_new.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>LPC0_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_new.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_new.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>PECI0_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_new.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_new.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>PWM0Fault_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_new.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_new.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>PWM0Generator0_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_new.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_new.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>PWM0Generator1_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_new.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_new.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>PWM0Generator2_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_new.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_new.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>PWM0Generator3_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_new.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_new.o(RESET)
</UL>
<P><STRONG><a name="[7d]"></a>PWM1Fault_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_new.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_new.o(RESET)
</UL>
<P><STRONG><a name="[79]"></a>PWM1Generator0_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_new.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_new.o(RESET)
</UL>
<P><STRONG><a name="[7a]"></a>PWM1Generator1_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_new.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_new.o(RESET)
</UL>
<P><STRONG><a name="[7b]"></a>PWM1Generator2_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_new.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_new.o(RESET)
</UL>
<P><STRONG><a name="[7c]"></a>PWM1Generator3_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_new.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_new.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>Quadrature0_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_new.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_new.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>Quadrature1_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_new.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_new.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>Quadrature2_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_new.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_new.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>SSI0_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_new.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_new.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>SSI1_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_new.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_new.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>SSI2_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_new.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_new.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>SSI3_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_new.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_new.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>SysCtl_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_new.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_new.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>Timer0B_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_new.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_new.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>Timer1B_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_new.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_new.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>Timer2A_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_new.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_new.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>Timer2B_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_new.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_new.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>Timer3A_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_new.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_new.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>Timer3B_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_new.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_new.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>Timer4A_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_new.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_new.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>Timer4B_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_new.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_new.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>Timer5A_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_new.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_new.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>Timer5B_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_new.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_new.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>UART0_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_new.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_new.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>UART1_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_new.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_new.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>UART2_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_new.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_new.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>UART3_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_new.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_new.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>UART4_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_new.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_new.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>UART5_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_new.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_new.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>UART6_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_new.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_new.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>UART7_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_new.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_new.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>USB0_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_new.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_new.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>WDT_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_new.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_new.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>WideTimer0B_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_new.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_new.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>WideTimer1B_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_new.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_new.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>WideTimer2A_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_new.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_new.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>WideTimer2B_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_new.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_new.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>WideTimer3B_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_new.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_new.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>WideTimer4B_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_new.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_new.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>WideTimer5B_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_new.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_new.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>uDMA_Error</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_new.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_new.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>uDMA_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_new.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_new.o(RESET)
</UL>
<P><STRONG><a name="[82]"></a>DisableInterrupts</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_new.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Signal
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Wait
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Init
</UL>

<P><STRONG><a name="[83]"></a>EnableInterrupts</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_new.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Signal
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Wait
</UL>

<P><STRONG><a name="[84]"></a>StartCritical</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_new.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Timer_Init
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PeriodicTask_InitC
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PeriodicTask_InitB
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PeriodicTask_Init
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_AddThreads
</UL>

<P><STRONG><a name="[85]"></a>EndCritical</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_new.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Timer_Init
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Time_Init
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PeriodicTask_InitC
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PeriodicTask_InitB
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PeriodicTask_Init
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_AddThreads
</UL>

<P><STRONG><a name="[86]"></a>WaitForInterrupt</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_new.o(.text), UNUSED, KEPT)

<P><STRONG><a name="[87]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_new.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[9b]"></a>Task0</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = Task0 &rArr; CYCL_10_ms &rArr; Motion_Calculate_Direction &rArr; OS_FIFO_Get &rArr; OS_Signal
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Wait
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CYCL_10_ms
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[9e]"></a>Task1</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = Task1 &rArr; OS_Wait
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Wait
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CYCL_100_ms
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[a0]"></a>Task2</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = Task2 &rArr; CYCL_1000_ms &rArr; Print_Motor_Parameters &rArr; LCD_out_number &rArr; LCD_out_string &rArr; LCD_out_char &rArr; LCD_write &rArr; SSI_write
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Wait
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CYCL_1000_ms
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[a2]"></a>Task3</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = Task3 &rArr; OS_EdgeTrigger_Restart
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Wait
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sleep
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EdgeTrigger_Restart
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinRead
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[a6]"></a>Task4</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = Task4 &rArr; OS_EdgeTrigger_Restart
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Wait
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sleep
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EdgeTrigger_Restart
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinRead
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[b3]"></a>Task5</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, main.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[b2]"></a>Task6</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, main.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[a7]"></a>Idle_Task</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Idle_Task &rArr; Motion_Stop &rArr; PWM_right_motor_duty_cycle
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motion_Stop
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[93]"></a>main</STRONG> (Thumb, 220 bytes, Stack size 64 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124 + Unknown Stack Size
<LI>Call Chain = main &rArr; OS_EdgeTrigger_Init &rArr; GPIOPinTypeGPIOInput &rArr; GPIOPadConfigSet
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlClockGet
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Launch
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitSemaphore
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Init
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FIFO_Init
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EdgeTrigger_Init
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_AddThreads
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_AddPeriodicEventThread
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motion_Init
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_init
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Temperature_Sensor_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[ad]"></a>ADC_Temperature_Sensor_Init</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, adc_handler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ADC_Temperature_Sensor_Init &rArr; ADCSequenceConfigure
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlPeripheralEnable
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntPrioritySet
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntEnable
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntDisable
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCSequenceStepConfigure
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCSequenceEnable
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCSequenceDisable
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCSequenceConfigure
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCIntEnable
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCIntDisable
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCIntClear
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c1]"></a>ADC_Light_Sensor_Init</STRONG> (Thumb, 300 bytes, Stack size 8 bytes, adc_handler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = ADC_Light_Sensor_Init &rArr; GPIOPinTypeADC &rArr; GPIOPadConfigSet
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlPeripheralEnable
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntPrioritySet
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntEnable
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntDisable
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeADC
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPadConfigSet
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIODirModeSet
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCSequenceStepConfigure
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCSequenceEnable
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCSequenceDisable
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCSequenceConfigure
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCIntEnable
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCIntDisable
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCIntClear
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motion_Init
</UL>

<P><STRONG><a name="[1d]"></a>ADC0Seq3_Handler</STRONG> (Thumb, 184 bytes, Stack size 48 bytes, adc_handler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = ADC0Seq3_Handler &rArr; OS_FIFO_Put &rArr; OS_Signal
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FIFO_Put
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCSequenceDataGet
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCIntStatus
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCIntClear
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_new.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>ADC1Seq0_Handler</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, adc_handler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = ADC1Seq0_Handler &rArr; OS_FIFO_Put &rArr; OS_Signal
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FIFO_Put
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCSequenceDataGet
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCIntStatus
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCIntClear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_new.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>ADC1Seq1_Handler</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, adc_handler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = ADC1Seq1_Handler &rArr; OS_FIFO_Put &rArr; OS_Signal
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FIFO_Put
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCSequenceDataGet
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCIntStatus
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCIntClear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_new.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>ADC1Seq2_Handler</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, adc_handler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = ADC1Seq2_Handler &rArr; OS_FIFO_Put &rArr; OS_Signal
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FIFO_Put
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCSequenceDataGet
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCIntStatus
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCIntClear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_new.o(RESET)
</UL>
<P><STRONG><a name="[9d]"></a>CYCL_10_ms</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, cyclic_activity_handler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = CYCL_10_ms &rArr; Motion_Calculate_Direction &rArr; OS_FIFO_Get &rArr; OS_Signal
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motion_Calculate_Direction
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task0
</UL>

<P><STRONG><a name="[9f]"></a>CYCL_100_ms</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, cyclic_activity_handler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CYCL_100_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCProcessorTrigger
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task1
</UL>

<P><STRONG><a name="[a1]"></a>CYCL_1000_ms</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, cyclic_activity_handler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = CYCL_1000_ms &rArr; Print_Motor_Parameters &rArr; LCD_out_number &rArr; LCD_out_string &rArr; LCD_out_char &rArr; LCD_write &rArr; SSI_write
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print_Welcome_Image
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print_Motor_Parameters
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Red_led_toggle
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCProcessorTrigger
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task2
</UL>

<P><STRONG><a name="[ec]"></a>GPIO_steering_switch_init</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gpio_handler.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motion_Init
</UL>

<P><STRONG><a name="[d2]"></a>GPIO_red_led_init</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, gpio_handler.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinWrite
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeGPIOOutput
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlPeripheralEnable
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPadConfigSet
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIODirModeSet
</UL>

<P><STRONG><a name="[d5]"></a>GPIO_red_led_toggle</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, gpio_handler.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinWrite
</UL>

<P><STRONG><a name="[d6]"></a>GPIO_lcd_init</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, gpio_handler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = GPIO_lcd_init &rArr; GPIOPinTypeGPIOOutput &rArr; GPIOPadConfigSet
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeGPIOOutput
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlPeripheralEnable
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPadConfigSet
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIODirModeSet
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_init
</UL>

<P><STRONG><a name="[d7]"></a>GPIO_lcd_DC</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, gpio_handler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO_lcd_DC
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_write
</UL>

<P><STRONG><a name="[d8]"></a>GPIO_lcd_RST</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, gpio_handler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO_lcd_RST
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_init
</UL>

<P><STRONG><a name="[d9]"></a>GPIO_motor_direction_init</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, gpio_handler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = GPIO_motor_direction_init &rArr; GPIOPinTypeGPIOOutput &rArr; GPIOPadConfigSet
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeGPIOOutput
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlPeripheralEnable
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPadConfigSet
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIODirModeSet
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motion_Init
</UL>

<P><STRONG><a name="[da]"></a>GPIO_motor_direction_select</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, gpio_handler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO_motor_direction_select
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motion_Max_Speed
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motion_Cruise
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motion_Go_Right
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motion_Go_Left
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motion_Go_Back
</UL>

<P><STRONG><a name="[db]"></a>Int_Master_Enable</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, interrupt_handler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Int_Master_Enable &rArr; IntMasterEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntMasterEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_delay_No_Int
</UL>

<P><STRONG><a name="[dd]"></a>Int_Master_Disable</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, interrupt_handler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Int_Master_Disable &rArr; IntMasterDisable
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntMasterDisable
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_delay_No_Int
</UL>

<P><STRONG><a name="[25]"></a>Comp0_Handler</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, interrupt_handler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Comp0_Handler &rArr; Motion_Go_Back &rArr; Motion_Stop &rArr; PWM_right_motor_duty_cycle
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motion_Go_Back
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComparatorIntStatus
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComparatorIntClear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_new.o(RESET)
</UL>
<P><STRONG><a name="[e4]"></a>LCD_set_cursor</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, lcd_handler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LCD_set_cursor &rArr; LCD_write &rArr; SSI_write
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_write
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_out_image
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_clear
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print_Motor_Parameters
</UL>

<P><STRONG><a name="[e5]"></a>LCD_clear</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, lcd_handler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = LCD_clear &rArr; LCD_set_cursor &rArr; LCD_write &rArr; SSI_write
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_set_cursor
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_write
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print_Motor_Parameters
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_init
</UL>

<P><STRONG><a name="[ac]"></a>LCD_init</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, lcd_handler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = LCD_init &rArr; SSI_lcd_init &rArr; GPIOPinTypeSSI &rArr; GPIOPadConfigSet
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_delay_No_Int
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSI_lcd_init
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_clear
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_write
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_lcd_RST
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_lcd_init
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e8]"></a>LCD_out_char</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, lcd_handler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LCD_out_char &rArr; LCD_write &rArr; SSI_write
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_write
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_out_number
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_out_string
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print_Motor_Parameters
</UL>

<P><STRONG><a name="[e9]"></a>LCD_out_string</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lcd_handler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = LCD_out_string &rArr; LCD_out_char &rArr; LCD_write &rArr; SSI_write
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_out_char
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_out_number
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print_Motor_Parameters
</UL>

<P><STRONG><a name="[ea]"></a>LCD_out_number</STRONG> (Thumb, 394 bytes, Stack size 16 bytes, lcd_handler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = LCD_out_number &rArr; LCD_out_string &rArr; LCD_out_char &rArr; LCD_write &rArr; SSI_write
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_out_string
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_out_char
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print_Motor_Parameters
</UL>

<P><STRONG><a name="[eb]"></a>LCD_out_image</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, lcd_handler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = LCD_out_image &rArr; LCD_set_cursor &rArr; LCD_write &rArr; SSI_write
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_set_cursor
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_write
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print_Welcome_Image
</UL>

<P><STRONG><a name="[aa]"></a>Motion_Init</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, motion_handler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = Motion_Init &rArr; PWM_motor_init &rArr; GPIOPinTypePWM &rArr; GPIOPadConfigSet
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_motor_init
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_motor_direction_init
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_steering_switch_init
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Light_Sensor_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ee]"></a>Motion_Go_Left</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, motion_handler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Motion_Go_Left &rArr; PWM_right_motor_duty_cycle
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_right_motor_duty_cycle
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_left_motor_duty_cycle
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_motor_direction_select
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motion_Calculate_Direction
</UL>

<P><STRONG><a name="[f1]"></a>Motion_Go_Right</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, motion_handler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Motion_Go_Right &rArr; PWM_right_motor_duty_cycle
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_right_motor_duty_cycle
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_left_motor_duty_cycle
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_motor_direction_select
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motion_Calculate_Direction
</UL>

<P><STRONG><a name="[a8]"></a>Motion_Stop</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, motion_handler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Motion_Stop &rArr; PWM_right_motor_duty_cycle
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_right_motor_duty_cycle
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_left_motor_duty_cycle
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motion_Go_Back
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motion_Calculate_Direction
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Idle_Task
</UL>

<P><STRONG><a name="[f2]"></a>Motion_Cruise</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, motion_handler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Motion_Cruise &rArr; PWM_right_motor_duty_cycle
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_right_motor_duty_cycle
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_left_motor_duty_cycle
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_motor_direction_select
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motion_Calculate_Direction
</UL>

<P><STRONG><a name="[f3]"></a>Motion_Max_Speed</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, motion_handler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Motion_Max_Speed &rArr; PWM_right_motor_duty_cycle
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_right_motor_duty_cycle
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_left_motor_duty_cycle
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_motor_direction_select
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motion_Calculate_Direction
</UL>

<P><STRONG><a name="[e1]"></a>Motion_Go_Back</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, motion_handler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Motion_Go_Back &rArr; Motion_Stop &rArr; PWM_right_motor_duty_cycle
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_right_motor_duty_cycle
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_left_motor_duty_cycle
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_motor_direction_select
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motion_Stop
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comp0_Handler
</UL>

<P><STRONG><a name="[cd]"></a>Motion_Calculate_Direction</STRONG> (Thumb, 264 bytes, Stack size 32 bytes, motion_handler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = Motion_Calculate_Direction &rArr; OS_FIFO_Get &rArr; OS_Signal
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FIFO_Get
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motion_Max_Speed
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motion_Cruise
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motion_Go_Right
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motion_Go_Left
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motion_Stop
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CYCL_10_ms
</UL>

<P><STRONG><a name="[cf]"></a>Print_Welcome_Image</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, printing_handler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Print_Welcome_Image &rArr; LCD_out_image &rArr; LCD_set_cursor &rArr; LCD_write &rArr; SSI_write
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_out_image
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CYCL_1000_ms
</UL>

<P><STRONG><a name="[d0]"></a>Print_Motor_Parameters</STRONG> (Thumb, 286 bytes, Stack size 16 bytes, printing_handler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = Print_Motor_Parameters &rArr; LCD_out_number &rArr; LCD_out_string &rArr; LCD_out_char &rArr; LCD_write &rArr; SSI_write
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FIFO_Get
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_out_number
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_out_string
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_out_char
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_clear
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_set_cursor
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CYCL_1000_ms
</UL>

<P><STRONG><a name="[ef]"></a>PWM_right_motor_duty_cycle</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, pwm_handler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PWM_right_motor_duty_cycle
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMPulseWidthSet
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMOutputState
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMGenPeriodGet
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMGenEnable
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMGenDisable
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motion_Max_Speed
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motion_Cruise
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motion_Go_Right
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motion_Go_Left
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motion_Go_Back
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motion_Stop
</UL>

<P><STRONG><a name="[f0]"></a>PWM_left_motor_duty_cycle</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, pwm_handler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PWM_left_motor_duty_cycle
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMPulseWidthSet
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMOutputState
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMGenPeriodGet
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMGenEnable
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMGenDisable
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motion_Max_Speed
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motion_Cruise
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motion_Go_Right
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motion_Go_Left
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motion_Go_Back
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motion_Stop
</UL>

<P><STRONG><a name="[ed]"></a>PWM_motor_init</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, pwm_handler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = PWM_motor_init &rArr; GPIOPinTypePWM &rArr; GPIOPadConfigSet
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlPWMClockSet
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMPulseWidthSet
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMGenPeriodSet
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMGenEnable
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMGenConfigure
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypePWM
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinConfigure
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlPeripheralEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motion_Init
</UL>

<P><STRONG><a name="[ff]"></a>PWM_Red_led_init</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, pwm_handler.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlPWMClockSet
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMPulseWidthSet
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMGenPeriodSet
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMGenPeriodGet
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMGenEnable
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMGenConfigure
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypePWM
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinConfigure
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlPeripheralEnable
</UL>

<P><STRONG><a name="[d1]"></a>PWM_Red_led_toggle</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, pwm_handler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PWM_Red_led_toggle
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMOutputState
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMGenEnable
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMGenDisable
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CYCL_1000_ms
</UL>

<P><STRONG><a name="[100]"></a>PWM_set_duty_cycle</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, pwm_handler.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMPulseWidthSet
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMGenPeriodGet
</UL>

<P><STRONG><a name="[101]"></a>PWM_motor_reverse_init</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, pwm_handler.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlPWMClockSet
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMPulseWidthSet
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMOutputState
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMGenPeriodSet
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMGenPeriodGet
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMGenEnable
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMGenConfigure
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypePWM
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinConfigure
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlPeripheralEnable
</UL>

<P><STRONG><a name="[102]"></a>PWM_motor_reverse_stop</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, pwm_handler.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlPeripheralDisable
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMOutputState
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMGenDisable
</UL>

<P><STRONG><a name="[e6]"></a>SSI_lcd_init</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, ssi_handler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = SSI_lcd_init &rArr; GPIOPinTypeSSI &rArr; GPIOPadConfigSet
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSIEnable
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSIDisable
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSIConfigSetExpClk
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSIClockSourceSet
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeSSI
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinConfigure
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlPeripheralEnable
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlClockGet
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_init
</UL>

<P><STRONG><a name="[109]"></a>SSI_shift_register_init</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, ssi_handler.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSIDisable
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSIClockSourceSet
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinConfigure
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlPeripheralEnable
</UL>

<P><STRONG><a name="[e3]"></a>SSI_write</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ssi_handler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SSI_write
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSIDataPut
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_write
</UL>

<P><STRONG><a name="[10b]"></a>TIMER_reload_calculator</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, timer_handler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = TIMER_reload_calculator &rArr; SysCtlClockGet
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlClockGet
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_delay
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_cyclic_50ms_init
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_cyclic_1s_init
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_delay_No_Int
</UL>

<P><STRONG><a name="[10c]"></a>TIMER_cyclic_1s_init</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, timer_handler.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerLoadSet
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerIntEnable
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerIntDisable
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerEnable
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerDisable
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerConfigure
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerClockSourceSet
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_reload_calculator
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlPeripheralEnable
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntPrioritySet
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntEnable
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntDisable
</UL>

<P><STRONG><a name="[114]"></a>TIMER_cyclic_50ms_init</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, timer_handler.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerLoadSet
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerIntEnable
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerIntDisable
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerEnable
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerDisable
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerConfigure
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerClockSourceSet
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_reload_calculator
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlPeripheralEnable
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntPrioritySet
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntEnable
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntDisable
</UL>

<P><STRONG><a name="[115]"></a>TIMER_delay</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, timer_handler.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_reload_calculator
</UL>

<P><STRONG><a name="[e7]"></a>TIMER_delay_No_Int</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, timer_handler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = TIMER_delay_No_Int &rArr; TIMER_reload_calculator &rArr; SysCtlClockGet
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_reload_calculator
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Int_Master_Disable
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Int_Master_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_init
</UL>

<P><STRONG><a name="[194]"></a>BSP_Button1_Init</STRONG> (Thumb, 112 bytes, Stack size 0 bytes, bsp_tm4c.o(.text), UNUSED)

<P><STRONG><a name="[195]"></a>BSP_Button1_Input</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, bsp_tm4c.o(.text), UNUSED)

<P><STRONG><a name="[196]"></a>BSP_Button2_Init</STRONG> (Thumb, 126 bytes, Stack size 0 bytes, bsp_tm4c.o(.text), UNUSED)

<P><STRONG><a name="[197]"></a>BSP_Button2_Input</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, bsp_tm4c.o(.text), UNUSED)

<P><STRONG><a name="[116]"></a>BSP_Joystick_Init</STRONG> (Thumb, 268 bytes, Stack size 8 bytes, bsp_tm4c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcinit
</UL>

<P><STRONG><a name="[198]"></a>BSP_Joystick_Input</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, bsp_tm4c.o(.text), UNUSED)

<P><STRONG><a name="[199]"></a>BSP_RGB_Init</STRONG> (Thumb, 620 bytes, Stack size 8 bytes, bsp_tm4c.o(.text), UNUSED)

<P><STRONG><a name="[19a]"></a>BSP_RGB_Set</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, bsp_tm4c.o(.text), UNUSED)

<P><STRONG><a name="[119]"></a>BSP_RGB_D_Set</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, bsp_tm4c.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_RGB_D_Init
</UL>

<P><STRONG><a name="[118]"></a>BSP_RGB_D_Init</STRONG> (Thumb, 314 bytes, Stack size 16 bytes, bsp_tm4c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_RGB_D_Set
</UL>

<P><STRONG><a name="[19b]"></a>BSP_RGB_D_Toggle</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, bsp_tm4c.o(.text), UNUSED)

<P><STRONG><a name="[19c]"></a>BSP_Buzzer_Init</STRONG> (Thumb, 196 bytes, Stack size 0 bytes, bsp_tm4c.o(.text), UNUSED)

<P><STRONG><a name="[19d]"></a>BSP_Buzzer_Set</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, bsp_tm4c.o(.text), UNUSED)

<P><STRONG><a name="[11a]"></a>BSP_Accelerometer_Init</STRONG> (Thumb, 236 bytes, Stack size 8 bytes, bsp_tm4c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcinit
</UL>

<P><STRONG><a name="[19e]"></a>BSP_Accelerometer_Input</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, bsp_tm4c.o(.text), UNUSED)

<P><STRONG><a name="[11b]"></a>BSP_Microphone_Init</STRONG> (Thumb, 152 bytes, Stack size 8 bytes, bsp_tm4c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcinit
</UL>

<P><STRONG><a name="[19f]"></a>BSP_Microphone_Input</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, bsp_tm4c.o(.text), UNUSED)

<P><STRONG><a name="[11c]"></a>BSP_Delay1ms</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, bsp_tm4c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parrotdelay
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commonInit
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandList
</UL>

<P><STRONG><a name="[122]"></a>BSP_LCD_FillRect</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, bsp_tm4c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setAddrWindow
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writedata
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_Drawaxes
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DrawCharS
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_FillScreen
</UL>

<P><STRONG><a name="[123]"></a>BSP_LCD_FillScreen</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, bsp_tm4c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_FillRect
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_InitR
</UL>

<P><STRONG><a name="[125]"></a>BSP_LCD_SetCursor</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, bsp_tm4c.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_InitR
</UL>

<P><STRONG><a name="[126]"></a>BSP_LCD_Init</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bsp_tm4c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_InitR
</UL>

<P><STRONG><a name="[128]"></a>BSP_LCD_DrawPixel</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, bsp_tm4c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pushColor
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setAddrWindow
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_PlotPoint
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_Drawaxes
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DrawCharS
</UL>

<P><STRONG><a name="[129]"></a>BSP_LCD_DrawFastVLine</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, bsp_tm4c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setAddrWindow
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writedata
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_PlotIncrement
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_Drawaxes
</UL>

<P><STRONG><a name="[12a]"></a>BSP_LCD_DrawFastHLine</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, bsp_tm4c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setAddrWindow
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writedata
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_Drawaxes
</UL>

<P><STRONG><a name="[1a0]"></a>BSP_LCD_Color565</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, bsp_tm4c.o(.text), UNUSED)

<P><STRONG><a name="[1a1]"></a>BSP_LCD_SwapColor</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, bsp_tm4c.o(.text), UNUSED)

<P><STRONG><a name="[12b]"></a>BSP_LCD_DrawBitmap</STRONG> (Thumb, 280 bytes, Stack size 40 bytes, bsp_tm4c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setAddrWindow
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writedata
</UL>

<P><STRONG><a name="[12c]"></a>BSP_LCD_DrawCharS</STRONG> (Thumb, 282 bytes, Stack size 48 bytes, bsp_tm4c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DrawPixel
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_FillRect
</UL>

<P><STRONG><a name="[12d]"></a>BSP_LCD_DrawChar</STRONG> (Thumb, 260 bytes, Stack size 56 bytes, bsp_tm4c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pushColor
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setAddrWindow
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_Drawaxes
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_OutUHex2
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_OutUFix2_1
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_OutUDec5
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_OutUDec4
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_OutUDec
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DrawString
</UL>

<P><STRONG><a name="[12e]"></a>BSP_LCD_DrawString</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, bsp_tm4c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DrawChar
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_OutUHex2
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_OutUFix2_1
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_OutUDec5
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_OutUDec4
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_OutUDec
</UL>

<P><STRONG><a name="[132]"></a>BSP_LCD_OutUDec</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, bsp_tm4c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DrawString
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DrawChar
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fillmessage
</UL>

<P><STRONG><a name="[133]"></a>BSP_LCD_OutUDec4</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, bsp_tm4c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DrawString
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DrawChar
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fillmessage4
</UL>

<P><STRONG><a name="[134]"></a>BSP_LCD_OutUDec5</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, bsp_tm4c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DrawString
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DrawChar
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fillmessage5
</UL>

<P><STRONG><a name="[135]"></a>BSP_LCD_OutUFix2_1</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, bsp_tm4c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DrawString
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DrawChar
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fillmessage2_1
</UL>

<P><STRONG><a name="[137]"></a>BSP_LCD_OutUHex2</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, bsp_tm4c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DrawString
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DrawChar
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fillmessage2_Hex
</UL>

<P><STRONG><a name="[139]"></a>BSP_LCD_Drawaxes</STRONG> (Thumb, 272 bytes, Stack size 48 bytes, bsp_tm4c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DrawChar
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DrawFastHLine
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DrawFastVLine
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DrawPixel
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_FillRect
</UL>

<P><STRONG><a name="[13a]"></a>BSP_LCD_PlotPoint</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, bsp_tm4c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DrawPixel
</UL>

<P><STRONG><a name="[13b]"></a>BSP_LCD_PlotIncrement</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, bsp_tm4c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DrawFastVLine
</UL>

<P><STRONG><a name="[1a2]"></a>BSP_Clock_InitFastest</STRONG> (Thumb, 180 bytes, Stack size 0 bytes, bsp_tm4c.o(.text), UNUSED)

<P><STRONG><a name="[1a3]"></a>BSP_Clock_GetFreq</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bsp_tm4c.o(.text), UNUSED)

<P><STRONG><a name="[13c]"></a>BSP_PeriodicTask_Init</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, bsp_tm4c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EndCritical
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartCritical
</UL>

<P><STRONG><a name="[5c]"></a>WideTimer5A_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, bsp_tm4c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = WideTimer5A_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_new.o(RESET)
</UL>
<P><STRONG><a name="[1a4]"></a>BSP_PeriodicTask_Stop</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, bsp_tm4c.o(.text), UNUSED)

<P><STRONG><a name="[1a5]"></a>BSP_PeriodicTask_Restart</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, bsp_tm4c.o(.text), UNUSED)

<P><STRONG><a name="[13d]"></a>BSP_PeriodicTask_InitB</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, bsp_tm4c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EndCritical
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartCritical
</UL>

<P><STRONG><a name="[5a]"></a>WideTimer4A_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, bsp_tm4c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = WideTimer4A_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_new.o(RESET)
</UL>
<P><STRONG><a name="[1a6]"></a>BSP_PeriodicTask_StopB</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, bsp_tm4c.o(.text), UNUSED)

<P><STRONG><a name="[13e]"></a>BSP_PeriodicTask_InitC</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, bsp_tm4c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EndCritical
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartCritical
</UL>

<P><STRONG><a name="[58]"></a>WideTimer3A_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, bsp_tm4c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = WideTimer3A_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_new.o(RESET)
</UL>
<P><STRONG><a name="[1a7]"></a>BSP_PeriodicTask_StopC</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, bsp_tm4c.o(.text), UNUSED)

<P><STRONG><a name="[13f]"></a>BSP_Time_Init</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, bsp_tm4c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EndCritical
</UL>

<P><STRONG><a name="[1a8]"></a>BSP_Time_Get</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, bsp_tm4c.o(.text), UNUSED)

<P><STRONG><a name="[140]"></a>BSP_LightSensor_Init</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, bsp_tm4c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cinit
</UL>

<P><STRONG><a name="[147]"></a>BSP_LightSensor_Input</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, bsp_tm4c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lightsensorend
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lightsensorstart
</UL>

<P><STRONG><a name="[148]"></a>BSP_LightSensor_Start</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, bsp_tm4c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lightsensorstart
</UL>

<P><STRONG><a name="[149]"></a>BSP_LightSensor_End</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, bsp_tm4c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lightsensorend
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lightsensorstart
</UL>

<P><STRONG><a name="[14a]"></a>BSP_TempSensor_Init</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, bsp_tm4c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cinit
</UL>

<P><STRONG><a name="[14d]"></a>BSP_TempSensor_Input</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, bsp_tm4c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tempsensorend
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tempsensorstart
</UL>

<P><STRONG><a name="[14e]"></a>BSP_TempSensor_Start</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, bsp_tm4c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tempsensorstart
</UL>

<P><STRONG><a name="[14f]"></a>BSP_TempSensor_End</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, bsp_tm4c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tempsensorend
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tempsensorstart
</UL>

<P><STRONG><a name="[151]"></a>OS_Suspend</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, os_core.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;runperiodicevents
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Wait
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sleep
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPortF_Handler
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPortD_Handler
</UL>

<P><STRONG><a name="[150]"></a>OS_Signal</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = OS_Signal
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableInterrupts
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisableInterrupts
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;runperiodicevents
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FIFO_Get
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FIFO_Put
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPortF_Handler
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPortD_Handler
</UL>

<P><STRONG><a name="[a9]"></a>OS_Init</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44 + Unknown Stack Size
<LI>Call Chain = OS_Init &rArr; OS_Timer_Init &rArr; SysCtlClockGet
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Timer_Init
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Clock_Init
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisableInterrupts
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[154]"></a>SetInitialStack</STRONG> (Thumb, 328 bytes, Stack size 0 bytes, os_core.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_AddThreads
</UL>

<P><STRONG><a name="[b4]"></a>OS_AddThreads</STRONG> (Thumb, 274 bytes, Stack size 40 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = OS_AddThreads
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetInitialStack
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EndCritical
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b5]"></a>OS_Launch</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = OS_Launch
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartOS
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[15f]"></a>Scheduler</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, os_core.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[a3]"></a>OS_Sleep</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = OS_Sleep
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Suspend
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task4
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task3
</UL>

<P><STRONG><a name="[af]"></a>OS_InitSemaphore</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, os_core.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FIFO_Init
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_AddPeriodicEventThread
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9c]"></a>OS_Wait</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = OS_Wait
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Suspend
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableInterrupts
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisableInterrupts
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FIFO_Get
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task4
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task3
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task2
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task1
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task0
</UL>

<P><STRONG><a name="[ae]"></a>OS_FIFO_Init</STRONG> (Thumb, 36 bytes, Stack size 4 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = OS_FIFO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitSemaphore
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[cc]"></a>OS_FIFO_Put</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = OS_FIFO_Put &rArr; OS_Signal
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Signal
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1Seq2_Handler
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1Seq1_Handler
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1Seq0_Handler
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0Seq3_Handler
</UL>

<P><STRONG><a name="[f4]"></a>OS_FIFO_Get</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = OS_FIFO_Get &rArr; OS_Signal
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Signal
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Wait
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print_Motor_Parameters
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motion_Calculate_Direction
</UL>

<P><STRONG><a name="[b1]"></a>OS_AddPeriodicEventThread</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OS_AddPeriodicEventThread
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitSemaphore
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f]"></a>GPIOPortD_Handler</STRONG> (Thumb, 256 bytes, Stack size 8 bytes, os_hw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = GPIOPortD_Handler &rArr; OS_Signal
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Signal
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Suspend
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOIntStatus
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOIntDisable
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOIntClear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_new.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>GPIOPortF_Handler</STRONG> (Thumb, 166 bytes, Stack size 8 bytes, os_hw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = GPIOPortF_Handler &rArr; OS_Signal
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Signal
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Suspend
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOIntStatus
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOIntDisable
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOIntClear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_new.o(RESET)
</UL>
<P><STRONG><a name="[b0]"></a>OS_EdgeTrigger_Init</STRONG> (Thumb, 324 bytes, Stack size 24 bytes, os_hw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = OS_EdgeTrigger_Init &rArr; GPIOPinTypeGPIOInput &rArr; GPIOPadConfigSet
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlPeripheralEnable
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntPrioritySet
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntEnable
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntDisable
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPadConfigSet
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIODirModeSet
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlPeripheralReady
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeGPIOInput
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOIntTypeSet
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOIntEnable
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOIntDisable
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a5]"></a>OS_EdgeTrigger_Restart</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, os_hw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OS_EdgeTrigger_Restart
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntEnable
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOIntEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task4
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task3
</UL>

<P><STRONG><a name="[152]"></a>OS_Clock_Init</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, os_hw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = OS_Clock_Init &rArr; SysCtlClockGet
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlClockGet
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlClockSet
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Init
</UL>

<P><STRONG><a name="[153]"></a>OS_Timer_Init</STRONG> (Thumb, 1316 bytes, Stack size 24 bytes, os_hw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36 + Unknown Stack Size
<LI>Call Chain = OS_Timer_Init &rArr; SysCtlClockGet
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerLoadSet
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerIntEnable
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerIntDisable
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerEnable
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerDisable
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerConfigure
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerClockSourceSet
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlPeripheralEnable
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntPrioritySet
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntEnable
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntDisable
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlClockGet
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EndCritical
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Init
</UL>

<P><STRONG><a name="[1f]"></a>Timer0A_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_hw.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_new.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>Timer1A_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_hw.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_new.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>WideTimer0A_Handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, os_hw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = WideTimer0A_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerIntClear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_new.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>WideTimer1A_Handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, os_hw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = WideTimer1A_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerIntClear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_new.o(RESET)
</UL>
<P><STRONG><a name="[1a9]"></a>OS_SysTick_Init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_hw.o(.text), UNUSED)

<P><STRONG><a name="[b]"></a>SysTick_Handler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, osasm.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Scheduler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_new.o(RESET)
</UL>
<P><STRONG><a name="[155]"></a>StartOS</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, osasm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Launch
</UL>

<P><STRONG><a name="[1aa]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[1ab]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[1ac]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[8f]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[94]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[1ad]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[160]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[1ae]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[98]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[1af]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[1b0]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[b8]"></a>ADCIntClear</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, adc.o(i.ADCIntClear))
<BR><BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1Seq2_Handler
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1Seq1_Handler
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1Seq0_Handler
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0Seq3_Handler
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Light_Sensor_Init
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Temperature_Sensor_Init
</UL>

<P><STRONG><a name="[1b1]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[b9]"></a>ADCIntDisable</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, adc.o(i.ADCIntDisable))
<BR><BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Light_Sensor_Init
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Temperature_Sensor_Init
</UL>

<P><STRONG><a name="[be]"></a>ADCIntEnable</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, adc.o(i.ADCIntEnable))
<BR><BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Light_Sensor_Init
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Temperature_Sensor_Init
</UL>

<P><STRONG><a name="[c5]"></a>ADCIntStatus</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, adc.o(i.ADCIntStatus))
<BR><BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1Seq2_Handler
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1Seq1_Handler
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1Seq0_Handler
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0Seq3_Handler
</UL>

<P><STRONG><a name="[ce]"></a>ADCProcessorTrigger</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, adc.o(i.ADCProcessorTrigger))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CYCL_100_ms
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CYCL_1000_ms
</UL>

<P><STRONG><a name="[bb]"></a>ADCSequenceConfigure</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, adc.o(i.ADCSequenceConfigure))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADCSequenceConfigure
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Light_Sensor_Init
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Temperature_Sensor_Init
</UL>

<P><STRONG><a name="[c6]"></a>ADCSequenceDataGet</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, adc.o(i.ADCSequenceDataGet))
<BR><BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1Seq2_Handler
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1Seq1_Handler
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1Seq0_Handler
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0Seq3_Handler
</UL>

<P><STRONG><a name="[ba]"></a>ADCSequenceDisable</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, adc.o(i.ADCSequenceDisable))
<BR><BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Light_Sensor_Init
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Temperature_Sensor_Init
</UL>

<P><STRONG><a name="[bd]"></a>ADCSequenceEnable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, adc.o(i.ADCSequenceEnable))
<BR><BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Light_Sensor_Init
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Temperature_Sensor_Init
</UL>

<P><STRONG><a name="[bc]"></a>ADCSequenceStepConfigure</STRONG> (Thumb, 154 bytes, Stack size 4 bytes, adc.o(i.ADCSequenceStepConfigure))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = ADCSequenceStepConfigure
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Light_Sensor_Init
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Temperature_Sensor_Init
</UL>

<P><STRONG><a name="[e0]"></a>ComparatorIntClear</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, comp.o(i.ComparatorIntClear))
<BR><BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comp0_Handler
</UL>

<P><STRONG><a name="[df]"></a>ComparatorIntStatus</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, comp.o(i.ComparatorIntStatus))
<BR><BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comp0_Handler
</UL>

<P><STRONG><a name="[c3]"></a>GPIODirModeSet</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, gpio.o(i.GPIODirModeSet))
<BR><BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeSSI
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypePWM
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeGPIOOutput
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_motor_direction_init
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_lcd_init
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_red_led_init
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeADC
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Light_Sensor_Init
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EdgeTrigger_Init
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeGPIOInput
</UL>

<P><STRONG><a name="[157]"></a>GPIOIntClear</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gpio.o(i.GPIOIntClear))
<BR><BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPortF_Handler
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPortD_Handler
</UL>

<P><STRONG><a name="[158]"></a>GPIOIntDisable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gpio.o(i.GPIOIntDisable))
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EdgeTrigger_Init
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPortF_Handler
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPortD_Handler
</UL>

<P><STRONG><a name="[15c]"></a>GPIOIntEnable</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gpio.o(i.GPIOIntEnable))
<BR><BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EdgeTrigger_Restart
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EdgeTrigger_Init
</UL>

<P><STRONG><a name="[156]"></a>GPIOIntStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gpio.o(i.GPIOIntStatus))
<BR><BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPortF_Handler
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPortD_Handler
</UL>

<P><STRONG><a name="[15b]"></a>GPIOIntTypeSet</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, gpio.o(i.GPIOIntTypeSet))
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EdgeTrigger_Init
</UL>

<P><STRONG><a name="[c4]"></a>GPIOPadConfigSet</STRONG> (Thumb, 312 bytes, Stack size 24 bytes, gpio.o(i.GPIOPadConfigSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIOPadConfigSet
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeSSI
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypePWM
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeGPIOOutput
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_motor_direction_init
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_lcd_init
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_red_led_init
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeADC
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Light_Sensor_Init
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EdgeTrigger_Init
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeGPIOInput
</UL>

<P><STRONG><a name="[fb]"></a>GPIOPinConfigure</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, gpio.o(i.GPIOPinConfigure))
<BR><BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSI_shift_register_init
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_motor_reverse_init
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Red_led_init
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_motor_init
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSI_lcd_init
</UL>

<P><STRONG><a name="[a4]"></a>GPIOPinRead</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gpio.o(i.GPIOPinRead))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task4
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task3
</UL>

<P><STRONG><a name="[c2]"></a>GPIOPinTypeADC</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, gpio.o(i.GPIOPinTypeADC))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = GPIOPinTypeADC &rArr; GPIOPadConfigSet
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPadConfigSet
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIODirModeSet
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Light_Sensor_Init
</UL>

<P><STRONG><a name="[15a]"></a>GPIOPinTypeGPIOInput</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, gpio.o(i.GPIOPinTypeGPIOInput))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = GPIOPinTypeGPIOInput &rArr; GPIOPadConfigSet
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPadConfigSet
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIODirModeSet
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EdgeTrigger_Init
</UL>

<P><STRONG><a name="[d3]"></a>GPIOPinTypeGPIOOutput</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, gpio.o(i.GPIOPinTypeGPIOOutput))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = GPIOPinTypeGPIOOutput &rArr; GPIOPadConfigSet
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPadConfigSet
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIODirModeSet
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_motor_direction_init
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_lcd_init
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_red_led_init
</UL>

<P><STRONG><a name="[fc]"></a>GPIOPinTypePWM</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, gpio.o(i.GPIOPinTypePWM))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = GPIOPinTypePWM &rArr; GPIOPadConfigSet
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPadConfigSet
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIODirModeSet
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_motor_reverse_init
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Red_led_init
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_motor_init
</UL>

<P><STRONG><a name="[105]"></a>GPIOPinTypeSSI</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, gpio.o(i.GPIOPinTypeSSI))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = GPIOPinTypeSSI &rArr; GPIOPadConfigSet
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPadConfigSet
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIODirModeSet
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSI_lcd_init
</UL>

<P><STRONG><a name="[d4]"></a>GPIOPinWrite</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gpio.o(i.GPIOPinWrite))
<BR><BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_motor_direction_select
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_lcd_RST
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_lcd_DC
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_red_led_toggle
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_red_led_init
</UL>

<P><STRONG><a name="[b7]"></a>IntDisable</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, interrupt.o(i.IntDisable))
<BR><BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Timer_Init
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_cyclic_50ms_init
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_cyclic_1s_init
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Light_Sensor_Init
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EdgeTrigger_Init
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Temperature_Sensor_Init
</UL>

<P><STRONG><a name="[c0]"></a>IntEnable</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, interrupt.o(i.IntEnable))
<BR><BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Timer_Init
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_cyclic_50ms_init
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_cyclic_1s_init
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Light_Sensor_Init
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EdgeTrigger_Restart
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EdgeTrigger_Init
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Temperature_Sensor_Init
</UL>

<P><STRONG><a name="[de]"></a>IntMasterDisable</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, interrupt.o(i.IntMasterDisable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IntMasterDisable
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUcpsid
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Int_Master_Disable
</UL>

<P><STRONG><a name="[dc]"></a>IntMasterEnable</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, interrupt.o(i.IntMasterEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IntMasterEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUcpsie
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Int_Master_Enable
</UL>

<P><STRONG><a name="[bf]"></a>IntPrioritySet</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, interrupt.o(i.IntPrioritySet))
<BR><BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Timer_Init
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_cyclic_50ms_init
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_cyclic_1s_init
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Light_Sensor_Init
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EdgeTrigger_Init
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Temperature_Sensor_Init
</UL>

<P><STRONG><a name="[fd]"></a>PWMGenConfigure</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, pwm.o(i.PWMGenConfigure))
<BR><BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_motor_reverse_init
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Red_led_init
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_motor_init
</UL>

<P><STRONG><a name="[f6]"></a>PWMGenDisable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, pwm.o(i.PWMGenDisable))
<BR><BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_motor_reverse_stop
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_right_motor_duty_cycle
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_left_motor_duty_cycle
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Red_led_toggle
</UL>

<P><STRONG><a name="[f9]"></a>PWMGenEnable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, pwm.o(i.PWMGenEnable))
<BR><BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_motor_reverse_init
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Red_led_init
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_right_motor_duty_cycle
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_motor_init
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_left_motor_duty_cycle
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Red_led_toggle
</UL>

<P><STRONG><a name="[f7]"></a>PWMGenPeriodGet</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, pwm.o(i.PWMGenPeriodGet))
<BR><BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_motor_reverse_init
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_set_duty_cycle
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Red_led_init
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_right_motor_duty_cycle
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_left_motor_duty_cycle
</UL>

<P><STRONG><a name="[fe]"></a>PWMGenPeriodSet</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, pwm.o(i.PWMGenPeriodSet))
<BR><BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_motor_reverse_init
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Red_led_init
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_motor_init
</UL>

<P><STRONG><a name="[f5]"></a>PWMOutputState</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, pwm.o(i.PWMOutputState))
<BR><BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_motor_reverse_stop
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_motor_reverse_init
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_right_motor_duty_cycle
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_left_motor_duty_cycle
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Red_led_toggle
</UL>

<P><STRONG><a name="[f8]"></a>PWMPulseWidthSet</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, pwm.o(i.PWMPulseWidthSet))
<BR><BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_motor_reverse_init
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_set_duty_cycle
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Red_led_init
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_right_motor_duty_cycle
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_motor_init
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_left_motor_duty_cycle
</UL>

<P><STRONG><a name="[106]"></a>SSIClockSourceSet</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ssi.o(i.SSIClockSourceSet))
<BR><BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSI_shift_register_init
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSI_lcd_init
</UL>

<P><STRONG><a name="[107]"></a>SSIConfigSetExpClk</STRONG> (Thumb, 58 bytes, Stack size 4 bytes, ssi.o(i.SSIConfigSetExpClk))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = SSIConfigSetExpClk
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSI_lcd_init
</UL>

<P><STRONG><a name="[10a]"></a>SSIDataPut</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ssi.o(i.SSIDataPut))
<BR><BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSIDataPut
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSIDataPut
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSI_write
</UL>

<P><STRONG><a name="[104]"></a>SSIDisable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ssi.o(i.SSIDisable))
<BR><BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSI_shift_register_init
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSI_lcd_init
</UL>

<P><STRONG><a name="[108]"></a>SSIEnable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ssi.o(i.SSIEnable))
<BR><BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSI_lcd_init
</UL>

<P><STRONG><a name="[ab]"></a>SysCtlClockGet</STRONG> (Thumb, 304 bytes, Stack size 12 bytes, sysctl.o(i.SysCtlClockGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SysCtlClockGet
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Timer_Init
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Clock_Init
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_reload_calculator
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSI_lcd_init
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[15d]"></a>SysCtlClockSet</STRONG> (Thumb, 270 bytes, Stack size 8 bytes, sysctl.o(i.SysCtlClockSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SysCtlClockSet
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Clock_Init
</UL>

<P><STRONG><a name="[fa]"></a>SysCtlPWMClockSet</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, sysctl.o(i.SysCtlPWMClockSet))
<BR><BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_motor_reverse_init
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Red_led_init
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_motor_init
</UL>

<P><STRONG><a name="[103]"></a>SysCtlPeripheralDisable</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, sysctl.o(i.SysCtlPeripheralDisable), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_motor_reverse_stop
</UL>

<P><STRONG><a name="[b6]"></a>SysCtlPeripheralEnable</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, sysctl.o(i.SysCtlPeripheralEnable))
<BR><BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Timer_Init
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_cyclic_50ms_init
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_cyclic_1s_init
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSI_shift_register_init
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_motor_reverse_init
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Red_led_init
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_motor_init
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSI_lcd_init
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_motor_direction_init
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_lcd_init
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_red_led_init
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Light_Sensor_Init
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EdgeTrigger_Init
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Temperature_Sensor_Init
</UL>

<P><STRONG><a name="[159]"></a>SysCtlPeripheralReady</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, sysctl.o(i.SysCtlPeripheralReady))
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EdgeTrigger_Init
</UL>

<P><STRONG><a name="[10f]"></a>TimerClockSourceSet</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, timer.o(i.TimerClockSourceSet))
<BR><BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Timer_Init
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_cyclic_50ms_init
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_cyclic_1s_init
</UL>

<P><STRONG><a name="[110]"></a>TimerConfigure</STRONG> (Thumb, 88 bytes, Stack size 4 bytes, timer.o(i.TimerConfigure))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = TimerConfigure
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Timer_Init
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_cyclic_50ms_init
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_cyclic_1s_init
</UL>

<P><STRONG><a name="[10e]"></a>TimerDisable</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, timer.o(i.TimerDisable))
<BR><BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Timer_Init
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_cyclic_50ms_init
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_cyclic_1s_init
</UL>

<P><STRONG><a name="[112]"></a>TimerEnable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, timer.o(i.TimerEnable))
<BR><BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Timer_Init
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_cyclic_50ms_init
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_cyclic_1s_init
</UL>

<P><STRONG><a name="[15e]"></a>TimerIntClear</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, timer.o(i.TimerIntClear))
<BR><BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WideTimer1A_Handler
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WideTimer0A_Handler
</UL>

<P><STRONG><a name="[10d]"></a>TimerIntDisable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, timer.o(i.TimerIntDisable))
<BR><BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Timer_Init
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_cyclic_50ms_init
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_cyclic_1s_init
</UL>

<P><STRONG><a name="[113]"></a>TimerIntEnable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, timer.o(i.TimerIntEnable))
<BR><BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Timer_Init
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_cyclic_50ms_init
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_cyclic_1s_init
</UL>

<P><STRONG><a name="[111]"></a>TimerLoadSet</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, timer.o(i.TimerLoadSet))
<BR><BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Timer_Init
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_cyclic_50ms_init
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_cyclic_1s_init
</UL>

<P><STRONG><a name="[1b2]"></a>__aeabi_dadd</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)

<P><STRONG><a name="[164]"></a>_dadd</STRONG> (Thumb, 332 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
</UL>

<P><STRONG><a name="[c9]"></a>__aeabi_ddiv</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0Seq3_Handler
</UL>

<P><STRONG><a name="[168]"></a>_ddiv</STRONG> (Thumb, 552 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[cb]"></a>__aeabi_d2uiz</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dfixu.o(x$fpl$dfixu))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0Seq3_Handler
</UL>

<P><STRONG><a name="[169]"></a>_dfixu</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, dfixu.o(x$fpl$dfixu), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[c7]"></a>__aeabi_ui2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dfltu))
<BR><BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0Seq3_Handler
</UL>

<P><STRONG><a name="[1b3]"></a>_dfltu</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dfltu), UNUSED)

<P><STRONG><a name="[c8]"></a>__aeabi_dmul</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0Seq3_Handler
</UL>

<P><STRONG><a name="[16a]"></a>_dmul</STRONG> (Thumb, 332 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[167]"></a>__fpl_dnaninf</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, dnaninf.o(x$fpl$dnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dfixu
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[166]"></a>__fpl_dretinf</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dretinf.o(x$fpl$dretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[ca]"></a>__aeabi_drsub</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, daddsub_clz.o(x$fpl$drsb))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_drsub
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0Seq3_Handler
</UL>

<P><STRONG><a name="[16b]"></a>_drsb</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, daddsub_clz.o(x$fpl$drsb), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[1b4]"></a>__aeabi_dsub</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)

<P><STRONG><a name="[16d]"></a>_dsub</STRONG> (Thumb, 464 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[8d]"></a>_fp_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fpinit.o(x$fpl$fpinit))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_fp_1
</UL>

<P><STRONG><a name="[1b5]"></a>__fplib_config_fpu_vfp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[1b6]"></a>__fplib_config_pureend_doubles</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[e2]"></a>LCD_write</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, lcd_handler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LCD_write &rArr; SSI_write
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSI_write
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_lcd_DC
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_out_image
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_out_char
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_clear
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_set_cursor
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_init
</UL>

<P><STRONG><a name="[117]"></a>adcinit</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, bsp_tm4c.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Microphone_Init
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Accelerometer_Init
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Joystick_Init
</UL>

<P><STRONG><a name="[11e]"></a>writecommand</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, bsp_tm4c.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_InitR
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setAddrWindow
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandList
</UL>

<P><STRONG><a name="[11f]"></a>writedata</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, bsp_tm4c.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DrawBitmap
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DrawFastHLine
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DrawFastVLine
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_FillRect
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pushColor
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_InitR
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setAddrWindow
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandList
</UL>

<P><STRONG><a name="[11d]"></a>commandList</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, bsp_tm4c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Delay1ms
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writedata
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writecommand
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_InitR
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commonInit
</UL>

<P><STRONG><a name="[120]"></a>commonInit</STRONG> (Thumb, 452 bytes, Stack size 8 bytes, bsp_tm4c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Delay1ms
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandList
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_InitR
</UL>

<P><STRONG><a name="[121]"></a>setAddrWindow</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, bsp_tm4c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writedata
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writecommand
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DrawChar
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DrawBitmap
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DrawFastHLine
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DrawFastVLine
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DrawPixel
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_FillRect
</UL>

<P><STRONG><a name="[124]"></a>ST7735_InitR</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, bsp_tm4c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_SetCursor
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_FillScreen
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commonInit
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandList
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writedata
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writecommand
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_Init
</UL>

<P><STRONG><a name="[127]"></a>pushColor</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, bsp_tm4c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writedata
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DrawChar
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DrawPixel
</UL>

<P><STRONG><a name="[12f]"></a>fillmessage</STRONG> (Thumb, 64 bytes, Stack size 12 bytes, bsp_tm4c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fillmessage
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_OutUDec
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fillmessage5
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fillmessage4
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fillmessage
</UL>

<P><STRONG><a name="[130]"></a>fillmessage4</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, bsp_tm4c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fillmessage
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_OutUDec4
</UL>

<P><STRONG><a name="[131]"></a>fillmessage5</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, bsp_tm4c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fillmessage
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_OutUDec5
</UL>

<P><STRONG><a name="[136]"></a>fillmessage2_1</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, bsp_tm4c.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_OutUFix2_1
</UL>

<P><STRONG><a name="[138]"></a>fillmessage2_Hex</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, bsp_tm4c.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_OutUHex2
</UL>

<P><STRONG><a name="[141]"></a>i2cinit</STRONG> (Thumb, 132 bytes, Stack size 0 bytes, bsp_tm4c.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_TempSensor_Init
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LightSensor_Init
</UL>

<P><STRONG><a name="[144]"></a>I2C_Recv2</STRONG> (Thumb, 116 bytes, Stack size 12 bytes, bsp_tm4c.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tempsensorend
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lightsensorend
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lightsensorstart
</UL>

<P><STRONG><a name="[146]"></a>I2C_Send1</STRONG> (Thumb, 124 bytes, Stack size 0 bytes, bsp_tm4c.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tempsensorend
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lightsensorend
</UL>

<P><STRONG><a name="[143]"></a>I2C_Send3</STRONG> (Thumb, 170 bytes, Stack size 12 bytes, bsp_tm4c.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tempsensorstart
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lightsensorend
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lightsensorstart
</UL>

<P><STRONG><a name="[142]"></a>lightsensorstart</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, bsp_tm4c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Send3
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Recv2
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LightSensor_End
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LightSensor_Start
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LightSensor_Input
</UL>

<P><STRONG><a name="[145]"></a>lightsensorend</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, bsp_tm4c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Send3
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Send1
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Recv2
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LightSensor_End
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LightSensor_Input
</UL>

<P><STRONG><a name="[14b]"></a>tempsensorstart</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, bsp_tm4c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Send3
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_TempSensor_End
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_TempSensor_Start
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_TempSensor_Input
</UL>

<P><STRONG><a name="[14c]"></a>tempsensorend</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, bsp_tm4c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Send1
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Recv2
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_TempSensor_End
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_TempSensor_Input
</UL>

<P><STRONG><a name="[7f]"></a>runperiodicevents</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = runperiodicevents &rArr; OS_Signal
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Signal
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Suspend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_core.o(.text)
</UL>
<P><STRONG><a name="[7e]"></a>runsleep</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, os_core.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> os_core.o(.text)
</UL>
<P><STRONG><a name="[16c]"></a>_dadd1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
</UL>

<P><STRONG><a name="[165]"></a>_dsub1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
